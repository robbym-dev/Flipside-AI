from uagents import Agent, Context, Model
from newsapi import NewsApiClient
from openai import OpenAI
from flask import Flask, request, jsonify
from uagents import Agent, Model
from keywords import get_keywords
from flask_app import query, context

client = OpenAI()
newsapi = NewsApiClient(api_key='api key here')
rabbit = Agent(name="rabbit", seed="rabbit recovery phrase")
prompt = """Given a query [QUERY] and the current context [CONTEXT], please generate three keywords of one word each that are likely to be important for looking up articles that could answer the query. Print only three keywords.
        To generate the list of keywords, consider the following factors:
        Relevance: How relevant are the keywords to the query and the context?
        Frequency: How often do the keywords appear in articles related to the query?
        Distinctiveness: How unique are the keywords compared to other keywords related to the query?
        Contextual relevance: How relevant are the keywords to the current context, including any additional information provided?

        Please provide a list of keywords that could be useful for searching for articles that could answer the query, in the order of importance.
        For example, if the query is "What are the benefits of meditation?", the context is a health and wellness blog, and the list of keywords generated by the LLM might look like this:
        Meditation, Benefits, Health, Wellness, Mindfulness, Stress relief, Mental health, Brain function, Relaxation, Mindful living

        Your output should be only in this: "keyword1, keyword2, ...". Make sure this is it. Only output the keywords. 

        Do not output it in a list and new lines such as:
        1. Example1
        2. Example2

        Your output should be keywords which are separated by commas. give around 5 keywords"""
class Message(Model):
    message: str
ans = None

async def get_article_from_newsapi(keywords):
    """Call NewsAPI to get article links based on keywords"""
    all_articles = newsapi.get_everything(q=keywords)
    return all_articles

@rabbit.on_event("startup")
async def handle_message(ctx: Context, query=query, context=context):
    keywords = get_keywords(query, context)
    article_links = await get_article_from_newsapi(keywords)
    global ans
    ans = article_links["articles"][0]["content"]
 
if __name__ == "__main__":
    rabbit.run()